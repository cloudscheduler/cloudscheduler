buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-lint-plugin:16.9.0'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9'
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:9.2.0'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
    }
}

ext {
    zookeeperVersion = '3.4.+'
    slf4jVersion = '1.7.+'
    jacksonVersion = '2.+'
    protostuffVersion = '1.+'
    springVersion = '5.+'

    junitVersion = '5.+'
    curatorVersion = '5.+'
    log4jVersion = '2.+'
    assertjVersion = '3.+'

    jacocoVersion = '0.8.+'
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    packageGroup = "io.github.cloudscheduler"
    username = System.getenv('SONATYPE_USERNAME')
    password = System.getenv('SONATYPE_PASSWORD')
}

allprojects {
    group = 'io.github.cloudscheduler'
    version = '1.0.3'

    apply plugin: 'nebula.lint'
    apply plugin: 'nebula.dependency-lock'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'de.marcphilipp.nexus-publish'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    jacoco {
        toolVersion = '0.8.5'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
        testImplementation group: 'org.assertj', name: 'assertj-core', version: assertjVersion
    }

    googleJavaFormat {
        source = 'src/main'
        source += 'src/test'
        include '**/*.java'
    }

    verifyGoogleJavaFormat {
        source = 'src/main'
        include '**/*.java'
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }

    gradleLint {
        criticalRules += 'all-dependency'
        excludedRules += 'overridden-dependency-version'
        alwaysRun = false
        build.finalizedBy lintGradle
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
                artifact(sourcesJar)
                artifact(javadocJar)
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    url = 'https://github.com/cloudscheduler/cloudscheduler'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            id = 'noodle05'
                            name = 'Wei Gao'
                            email = 'wei@gaofamily.org'
                        }
                    }
                    scm {
                        url = 'https://github.com/cloudscheduler/cloudscheduler'
                        connection = 'scm:git:git@github.com:cloudscheduler/cloudscheduler.git'
                        developerConnection = 'scm:git:git@github.com:cloudscheduler/cloudscheduler.git'
                    }
                }
            }
        }
    }

    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }

    nexusPublishing {
        repositories {
            sonatype()
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        finalizedBy jacocoTestReport

        jacoco {
            excludes += [
                    'io.github.cloudscheduler.Job',
                    'io.github.cloudscheduler.NodeRole',
                    'io.github.cloudscheduler.CancelReason',
                    'io.github.cloudscheduler.JobException',
                    'io.github.cloudscheduler.CloudSchedulerObserver',
                    'io.github.cloudscheduler.Node',
                    'io.github.cloudscheduler.codec.EntityCodecProvider',
                    'io.github.cloudscheduler.model.*',
                    'io.github.cloudscheduler.codec.jackson.*MixIn',
                    'io.github.cloudscheduler.AsyncService',
                    'io.github.cloudscheduler.util.CompletableFutureUtils.TimeoutCompletableFuture',
                    'io.github.cloudscheduler.service.JobService',
                    'io.github.cloudscheduler.SchedulerImpl'
            ]
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                limit {
                    minimum = 0.5
                }
                excludes = test.jacoco.excludes
            }
        }
    }

    jacocoTestReport {
        afterEvaluate {
            classDirectories.setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: test.jacoco.excludes.collect {
                    if (!it.endsWith('*')) {
                        it.replace('.', '/') + '.class'
                    } else {
                        it.replace('.', '/')
                    }
                })
            })
        }
    }

    task allDeps(type: DependencyReportTask) {}

    check.dependsOn jacocoTestCoverageVerification
}
